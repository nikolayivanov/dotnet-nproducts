// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutoRestApiClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MyNProductsAPI.
    /// </summary>
    public static partial class MyNProductsAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productName'>
            /// </param>
            /// <param name='supplierName'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='orderByFieldName'>
            /// </param>
            /// <param name='orderByDirection'>
            /// </param>
            public static PagedCollectionResponseProductsDTO Get(this IMyNProductsAPI operations, string productName = default(string), string supplierName = default(string), int? categoryId = default(int?), int? page = default(int?), int? pageSize = default(int?), string orderByFieldName = default(string), string orderByDirection = default(string))
            {
                return operations.GetAsync(productName, supplierName, categoryId, page, pageSize, orderByFieldName, orderByDirection).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productName'>
            /// </param>
            /// <param name='supplierName'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='orderByFieldName'>
            /// </param>
            /// <param name='orderByDirection'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedCollectionResponseProductsDTO> GetAsync(this IMyNProductsAPI operations, string productName = default(string), string supplierName = default(string), int? categoryId = default(int?), int? page = default(int?), int? pageSize = default(int?), string orderByFieldName = default(string), string orderByDirection = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(productName, supplierName, categoryId, page, pageSize, orderByFieldName, orderByDirection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            public static int? Post(this IMyNProductsAPI operations, ProductsDTO product = default(ProductsDTO))
            {
                return operations.PostAsync(product).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> PostAsync(this IMyNProductsAPI operations, ProductsDTO product = default(ProductsDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(product, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ProductsDTO Get1(this IMyNProductsAPI operations, int id)
            {
                return operations.Get1Async(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductsDTO> Get1Async(this IMyNProductsAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            public static void Put(this IMyNProductsAPI operations, int id, ProductsDTO product = default(ProductsDTO))
            {
                operations.PutAsync(id, product).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync(this IMyNProductsAPI operations, int id, ProductsDTO product = default(ProductsDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutWithHttpMessagesAsync(id, product, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Delete(this IMyNProductsAPI operations, int id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMyNProductsAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
