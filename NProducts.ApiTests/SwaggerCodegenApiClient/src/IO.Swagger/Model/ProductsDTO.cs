/* 
 * My NProducts API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProductsDTO
    /// </summary>
    [DataContract]
    public partial class ProductsDTO :  IEquatable<ProductsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductsDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDTO" /> class.
        /// </summary>
        /// <param name="productId">productId.</param>
        /// <param name="productName">productName (required).</param>
        /// <param name="quantityPerUnit">quantityPerUnit.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="supplierId">supplierId.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="categoryName">categoryName.</param>
        /// <param name="supplierCompanyName">supplierCompanyName.</param>
        public ProductsDTO(int? productId = default(int?), string productName = default(string), string quantityPerUnit = default(string), double? unitPrice = default(double?), int? supplierId = default(int?), int? categoryId = default(int?), string categoryName = default(string), string supplierCompanyName = default(string))
        {
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new InvalidDataException("productName is a required property for ProductsDTO and cannot be null");
            }
            else
            {
                this.ProductName = productName;
            }
            this.ProductId = productId;
            this.QuantityPerUnit = quantityPerUnit;
            this.UnitPrice = unitPrice;
            this.SupplierId = supplierId;
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.SupplierCompanyName = supplierCompanyName;
        }
        
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerUnit
        /// </summary>
        [DataMember(Name="quantityPerUnit", EmitDefaultValue=false)]
        public string QuantityPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets SupplierId
        /// </summary>
        [DataMember(Name="supplierId", EmitDefaultValue=false)]
        public int? SupplierId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets SupplierCompanyName
        /// </summary>
        [DataMember(Name="supplierCompanyName", EmitDefaultValue=false)]
        public string SupplierCompanyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductsDTO {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  QuantityPerUnit: ").Append(QuantityPerUnit).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SupplierCompanyName: ").Append(SupplierCompanyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductsDTO);
        }

        /// <summary>
        /// Returns true if ProductsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.QuantityPerUnit == input.QuantityPerUnit ||
                    (this.QuantityPerUnit != null &&
                    this.QuantityPerUnit.Equals(input.QuantityPerUnit))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.SupplierId == input.SupplierId ||
                    (this.SupplierId != null &&
                    this.SupplierId.Equals(input.SupplierId))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.SupplierCompanyName == input.SupplierCompanyName ||
                    (this.SupplierCompanyName != null &&
                    this.SupplierCompanyName.Equals(input.SupplierCompanyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.QuantityPerUnit != null)
                    hashCode = hashCode * 59 + this.QuantityPerUnit.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.SupplierId != null)
                    hashCode = hashCode * 59 + this.SupplierId.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.SupplierCompanyName != null)
                    hashCode = hashCode * 59 + this.SupplierCompanyName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProductName (string) maxLength
            if(this.ProductName != null && this.ProductName.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, length must be less than 40.", new [] { "ProductName" });
            }

            // ProductName (string) minLength
            if(this.ProductName != null && this.ProductName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductName, length must be greater than 0.", new [] { "ProductName" });
            }

            // UnitPrice (double?) maximum
            if(this.UnitPrice > (double?)999.99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitPrice, must be a value less than or equal to 999.99.", new [] { "UnitPrice" });
            }

            // UnitPrice (double?) minimum
            if(this.UnitPrice < (double?)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitPrice, must be a value greater than or equal to 0.0.", new [] { "UnitPrice" });
            }

            yield break;
        }
    }

}
